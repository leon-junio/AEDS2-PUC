import java.util.Date;
import java.util.ArrayList;
import java.io.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;

class Ferramentas {

	// MATRICULA COMO ALUNO DEFINIDA PARA USO INTERNO NO SISTEMA
	private final static String matricula = "1369371";

	public static String getMatricula() {
		return matricula;
	}

	public static String myReplace(String frase, char antiga, char nova) {
		String resp = "";
		if (frase != null) {
			for (int i = 0; i < frase.length(); i++) {
				if (frase.charAt(i) == antiga) {
					resp += nova;
				} else {
					// trim para remover espa?os
					if (frase.charAt(i) != ' ') {
						resp += frase.charAt(i);
					}
				}
			}
		}
		return resp;
	}

	public static int myIndexOf(String frase, char letra) {
		int resp = -1;
		if (frase != null) {
			for (int i = 0; i < frase.length(); i++) {
				if (frase.charAt(i) == letra) {
					resp = i;
					i = frase.length();
				}
			}
		}
		return resp;
	}

	public static String myTrim(String frase) {
		String resp = "";
		if (frase != null) {
			for (int i = 0; i < frase.length(); i++) {
				if (frase.charAt(i) != ' ') {
					resp += frase.charAt(i);
				}
			}
		}
		return resp;
	}

	public static String mySubstring(String frase, int inic, int fim) {
		String resp = "";
		if (frase != null) {
			if (fim - inic <= frase.length()) {
				for (int i = inic; i < fim; i++) {
					resp += frase.charAt(i);
				}
			}
		}
		return resp;
	}

	public static String mySubstring(String frase, char cInic, char cFim) {
		String resp = "";
		if (frase != null) {
			int inic = Ferramentas.myIndexOf(frase, cInic);
			int fim = Ferramentas.myIndexOf(frase, cFim);
			if (fim - inic <= frase.length()) {
				for (int i = inic; i < fim + 1; i++) {
					resp += frase.charAt(i);
				}
			}
		}
		return resp;
	}

	public static boolean gerarLog(double inic, double fim, int comp) {
		boolean resp = true;
		try {
			BufferedWriter bw = new BufferedWriter(new FileWriter(getMatricula() + "_hashReserva.txt"));
			bw.write(getMatricula() + "\t" + (fim - inic) / 1000.0 + "\t" + comp);
			bw.close();
		} catch (IOException io) {
			io.printStackTrace();
			resp = false;
		}
		return resp;
	}

	public static boolean myContains(String frase, String ver) {
		boolean resp = false;
		String aux = "";
		int count = 0;
		if (frase != null) {
			for (int i = 0; i < frase.length(); i++) {
				if (frase.charAt(i) == ver.charAt(0)) {
					if ((frase.length() - i) >= ver.length()) {
						for (int j = i; j < frase.length(); j++) {
							aux += frase.charAt(j);
							count++;
							if (count == ver.length()) {
								j = frase.length();
								count = 0;
							}
						}
						if (myEquals(aux, ver)) {
							resp = true;
							i = frase.length();
						} else {
							aux = "";
							count = 0;
						}
					} else {
						aux = "";
					}
				}
			}
		}
		return resp;
	}

	public static boolean myEquals(String str1, String str2) {
		boolean resp = false;
		if (str1 != null && str2 != null) {
			if (str1.length() == str2.length()) {
				resp = true;
				for (int i = 0; i < str1.length(); i++) {
					if (str1.charAt(i) != str2.charAt(i)) {
						resp = false;
					}
				}
			}
		}
		return resp;
	}

	public static String myReplace(String str, String str_old, String str_new) {
		String resp = "", auxresp = "";
		boolean eql = false;
		int j = 0;
		if (str != null && str_new != null && str_old != null) {
			for (int i = 0; i < str.length(); i++) {
				if (str.charAt(i) == str_old.charAt(j)) {
					eql = true;
					j++;
					auxresp += str.charAt(i);
				} else {
					if (eql) {
						j = 0;
						if (str.charAt(i) == str_old.charAt(j)) {
							resp += auxresp;
							auxresp = "";
							eql = true;
							j++;
							auxresp += str.charAt(i);
						} else {
							eql = false;
							resp += auxresp += str.charAt(i);
							auxresp = "";
						}
					} else {
						resp += str.charAt(i);
					}
				}
				if (eql) {
					if (j == str_old.length()) {
						resp += str_new;
						auxresp = "";
						j = 0;
						eql = false;
					}
				}
			}
		}
		return resp;
	}

	public static String inicioTrim(String line, char end) {
		String resp = "";
		boolean next = false;
		if (line != null) {
			for (int i = 0; i < line.length(); i++) {
				if (line.charAt(i) == end) {
					next = true;
				}
				if (next)
					resp += line.charAt(i);
			}
		}
		if (resp.length() == 0)
			return line;
		else
			return resp;
	}

	public static String removeTags(String line) {
		String resp = "";
		boolean next = false;
		if (line != null) {
			for (int i = 0; i < line.length(); i++) {
				if (line.charAt(i) == '>')
					next = true;
				else if (line.charAt(i) == '<')
					next = false;
				else if (next)
					resp += line.charAt(i);
			}
		}
		return resp;
	}

	public static String removeTags(String line, char separador) {
		String resp = "";
		int count = 0;
		boolean next = false;
		if (line != null) {
			for (int i = 0; i < line.length(); i++) {
				if (line.charAt(i) == '>')
					next = true;
				else if (line.charAt(i) == '<') {
					next = false;
					if (count != 0)
						resp += separador;
					count = 0;
				} else if (next) {
					count++;
					resp += line.charAt(i);
				}
			}
		}
		return resp;
	}

	public static Date getData(String data) {
		Date date = null;
		if (data != null) {
			try {
				SimpleDateFormat format = new SimpleDateFormat("dd/MM/yyyy");
				date = format.parse(data);
			} catch (ParseException pe) {
				MyIO.println(pe.getMessage());
				return null;
			}
		}
		return date;
	}

	public static int getMinutos(String linha) {
		String hr = "", mn = "";
		int conta = 0;
		boolean chk = false;
		if (linha != null) {
			for (int i = 0; i < linha.length(); i++) {
				if (chk) {
					if (linha.charAt(i) != ' ') {
						mn += linha.charAt(i);
					}
				} else {
					if (linha.charAt(i) != ' ') {
						hr += linha.charAt(i);
					} else {
						chk = true;
					}
				}
			}
			conta = Integer.parseInt(mn);
			if (hr.length() > 0) {
				conta += Integer.parseInt(hr) * 60;
			}
		}
		return conta;
	}

	public static String formatDate(Date dt) {
		String resp = "";
		try {
			SimpleDateFormat sfd = new SimpleDateFormat("dd/MM/yyyy");
			resp = sfd.format(dt);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return resp;
	}

}

class Filme {
	private String nome, titulo, genero, idioma, situacao;
	private float orcamento;
	private int duracao;
	private Date lancamento;
	private ArrayList<String> listChaves = new ArrayList<>();

	public int getDuracao() {
		return duracao;
	}

	public String getIdioma() {
		return idioma;
	}

	public String getGenero() {
		return genero;
	}

	public Date getLancamento() {
		return lancamento;
	}

	public String getNome() {
		return nome;
	}

	public float getOrcamento() {
		return orcamento;
	}

	public String getSituacao() {
		return situacao;
	}

	public String getTitulo() {
		return titulo;
	}

	public void setDuracao(int duracao) {
		this.duracao = duracao;
	}

	public void setGenero(String genero) {
		this.genero = genero;
	}

	public void setIdioma(String idioma) {
		this.idioma = idioma;
	}

	public void setLancamento(Date lancamento) {
		this.lancamento = lancamento;
	}

	public void setNome(String nome) {
		this.nome = nome;
	}

	public void setOrcamento(float orcamento) {
		this.orcamento = orcamento;
	}

	public void setSituacao(String situacao) {
		this.situacao = situacao;
	}

	public void setTitulo(String titulo) {
		this.titulo = titulo;
	}

	public ArrayList<String> getListChaves() {
		return listChaves;
	}

	public void setListChaves(ArrayList<String> listChaves) {
		this.listChaves.addAll(listChaves);
	}

	public void addChave(String palavra) {
		listChaves.add(palavra);
	}

	public String getChave(int index) {
		return listChaves.get(index);
	}

	public Filme(String entrada) {
		ler(entrada);
	}

	public Filme() {
	}

	public Filme clonar() {
		Filme dolly = new Filme();
		dolly.setDuracao(getDuracao());
		dolly.setGenero(getGenero());
		dolly.setIdioma(getIdioma());
		dolly.setLancamento(getLancamento());
		dolly.setNome(getNome());
		dolly.setSituacao(getSituacao());
		dolly.setOrcamento(getOrcamento());
		dolly.setTitulo(getTitulo());
		dolly.setListChaves(getListChaves());
		return dolly;
	}

	private void ler(String entrada) {
		try {
			String line = "";
			BufferedReader buff = new BufferedReader(new FileReader(getFile(entrada)));// Arquivo HTML
			line = buff.readLine();
			while (!Ferramentas.myContains(line, "og:title")) {
				line = buff.readLine();
			}
			setNome(tratarLinha(line, 9));
			line = buff.readLine();
			while (!Ferramentas.myContains(line, "class=\"release\"")) {
				line = buff.readLine();
			}
			line = buff.readLine();
			setLancamento(Ferramentas.getData(tratarLinha(line, 1)));
			line = buff.readLine();
			while (!Ferramentas.myContains(line, "class=\"genres\"")) {
				line = buff.readLine();
			}
			buff.readLine();
			line = buff.readLine();
			setGenero(tratarLinha(line, 2));
			line = buff.readLine();
			while (!Ferramentas.myContains(line, "class=\"runtime\"")) {
				line = buff.readLine();
			}
			buff.readLine();
			line = buff.readLine();
			setDuracao(Integer.parseInt(tratarLinha(line, 3)));
			line = buff.readLine();
			boolean chk = false;
			while (!Ferramentas.myContains(line, "Título original")) {
				line = buff.readLine();
				if (Ferramentas.myContains(line, "<bdi>Situação</bdi>")) {
					setTitulo(getNome());
					chk = true;
					break;
				}
			}
			if (chk == false) {
				setTitulo(tratarLinha(line, 4));
				line = buff.readLine();
			}
			while (!Ferramentas.myContains(line, "Situação")) {
				line = buff.readLine();
			}
			setSituacao(tratarLinha(line, 5));
			line = buff.readLine();
			while (!Ferramentas.myContains(line, "Idioma original")) {
				line = buff.readLine();
			}
			setIdioma(tratarLinha(line, 6));
			line = buff.readLine();
			while (!Ferramentas.myContains(line, "Orçamento")) {
				line = buff.readLine();
			}
			setOrcamento(Float.parseFloat(tratarLinha(line, 7)));
			line = buff.readLine();
			while (!Ferramentas.myContains(line, "Palavras-chave")) {
				line = buff.readLine();
			}
			line = buff.readLine();
			line = buff.readLine();
			if (Ferramentas.myContains(line, "Nenhuma palavra-chave foi adicionada")) {
				line = "</ul>";
			}
			while (!Ferramentas.myContains(line, "</ul>")) {
				if (Ferramentas.myContains(line, "<li>")) {
					addChave(tratarLinha(line, 8));
				}
				line = buff.readLine();
			}
			buff.close();
		} catch (IOException io) {
			System.err.println(io.getMessage());
			io.printStackTrace();
		} catch (Exception e) {
			System.err.println("Erro desconhecido dentro da funï¿½ï¿½o de leitura: " + e.getMessage());
			e.printStackTrace();
		}

	}

	public void imprimir() {
		MyIO.print(getNome() + " ");
		MyIO.print(getTitulo() + " ");
		MyIO.print(Ferramentas.formatDate(getLancamento()) + " ");
		MyIO.print(getDuracao() + " ");
		MyIO.print(getGenero() + " ");
		MyIO.print(getIdioma() + " ");
		MyIO.print(getSituacao() + " ");
		MyIO.print(getOrcamento() + " ");
		MyIO.print("[");
		ArrayList<String> chaves = getListChaves();
		for (int i = 0; i < chaves.size(); i++) {
			if (i < chaves.size() - 1) {
				MyIO.print(chaves.get(i) + ", ");
			} else {
				MyIO.print(chaves.get(i));
			}
		}
		MyIO.print("]");
		MyIO.println("");
	}

	private String tratarLinha(String linha, int op) {
		String resp = "";
		linha = Ferramentas.inicioTrim(linha, '<');
		// Para cada entrada tem um tratamento de linha diferenciado
		switch (op) {
			case 1:
				String locale = Ferramentas.mySubstring(linha, Ferramentas.myIndexOf(linha, '('),
						Ferramentas.myIndexOf(linha, ')') + 1);
				linha = Ferramentas.myReplace(linha, " " + locale, " ");
				resp = Ferramentas.myTrim(linha);
				break;
			case 2:
				resp = Ferramentas.removeTags(linha, ',');
				resp = Ferramentas.myReplace(resp, ",,&nbsp;", "");
				break;
			case 3:
				linha = Ferramentas.myReplace(linha, 'm', ' ');
				if (Ferramentas.myContains(linha, "h")) {
					linha = Ferramentas.myReplace(linha, 'h', ' ');
				} else {
					resp = " " + linha;
					linha = resp;
					resp = "";
				}
				resp = "" + Ferramentas.getMinutos(linha);
				break;
			case 4:
				resp = Ferramentas.myReplace(linha, "<p class=\"wrap\"><strong>Título original</strong> ", "");
				resp = Ferramentas.myReplace(resp, "</p>", "");
				break;
			case 5:
				resp = Ferramentas.myReplace(linha, "<strong><bdi>Situação</bdi></strong> ", "");
				break;
			case 6:
				resp = Ferramentas.myReplace(linha, "<p><strong><bdi>Idioma original</bdi></strong> ", "");
				resp = Ferramentas.myReplace(resp, "</p>", "");
				break;
			case 7:
				resp = Ferramentas.myReplace(linha, "<p><strong><bdi>Orçamento</bdi></strong> ", "");
				resp = Ferramentas.myReplace(resp, "</p>", "");
				if (Ferramentas.myContains(linha, "-")) {
					resp = "0.0";
				} else {
					resp = Ferramentas.myReplace(resp, ",", "");
					resp = Ferramentas.myReplace(resp, "$", "");
				}
				break;
			case 8:
				resp = Ferramentas.removeTags(linha);
				break;
			case 9:
				resp = Ferramentas.myReplace(linha, "<meta property=\"og:title\" content=\"", "");
				resp = Ferramentas.myReplace(resp, "\">", "");
				resp = Ferramentas.myReplace(resp, "&amp;", "");
				break;
			default:
				break;
		}
		return resp;
	}

	private File getFile(String name) throws IOException {
		File file;
		file = new File("/tmp/filmes/" + name);
		// file = new File("../tmp/filmes/" + name);
		if (!file.isFile()) {
			throw new IOException("O arquivo nao foi encontrado na pasta tmp arquivo:" + name);
		} else {
			return file;
		}
	}

}

class HashList {

	// Posso usar essa classe para instanciar as filas, pilhas e listas

	public HashList() {
		this(30, 9, 21);
	}

	public HashList(int num, int reserva, int tamTab) {
		this.reserva = reserva;
		this.tamTab = tamTab;
		filmes = new Filme[num];
	}

	private Filme[] filmes;
	private int reserva = 0, tamTab = 0;

	public void inserir(Filme obj) {
		int hash = 0;
		for (char lt : obj.getTitulo().toCharArray()) {
			hash += (int) lt;
		}
		hash = hash % tamTab;
		if (filmes[hash] == null) {
			filmes[hash] = obj;
		} else {
			for (int i = filmes.length - reserva; i < filmes.length; i++) {
				if (filmes[i] == null) {
					filmes[i] = obj;
					i = filmes.length;
				}
			}
		}

	}

	public void imprimir() {
		for (Filme filmeObj : filmes) {
			filmeObj.imprimir();
		}
	}

	/**
	 * Retorna o timestamp atual
	 * 
	 * @return timestamp atual
	 */
	public long now() {
		return new Date().getTime();
	}

	private int comp;

	public void setComp(int comp) {
		this.comp = comp;
	}

	public int getComparacoes() {
		return this.comp;
	}

	public boolean findSequencial(String nome) {
		boolean resp = false;
		int comp = 0;
		int hash = 0;
		for (char lt : nome.toCharArray()) {
			hash += (int) lt;
		}
		hash = hash % tamTab;
		comp++;
		if (filmes[hash] != null && filmes[hash].getTitulo().equals(nome)) {
			MyIO.println("Posicao: " + hash);
			resp = true;
		} else {
			// System.out.println("verificando");
			resp = false;
			for (int i = filmes.length - reserva; i < filmes.length; i++) {
				comp++;
				// System.out.println(filmes[i].getTitulo() + " <-> " + nome);
				if (filmes[i] != null && filmes[i].getTitulo().equals(nome)) {
					MyIO.println("Posicao: " + i);
					resp = true;
				}
			}
		}
		setComp(comp);
		return resp;
	}

}

public class Tp4Q05 {

	private static boolean isFim(String entrada) {
		return entrada.length() == 3 && Ferramentas.myEquals(entrada, "FIM");
	}

	public static void main(String[] args) {
		ArrayList<String> entradas = new ArrayList<>();
		ArrayList<String> verificacoes = new ArrayList<>();
		HashList lista;
		double fim, inic;
		int comp = 0;
		String entrada = "";
		MyIO.setCharset("UTF-8");
		do {
			entrada = MyIO.readLine();
			if (!isFim(entrada)) {
				entradas.add(entrada);
			}
		} while (!isFim(entrada));
		do {
			entrada = MyIO.readLine();
			if (!isFim(entrada)) {
				verificacoes.add(entrada);
			}
		} while (!isFim(entrada));

		lista = new HashList();
		for (String ent : entradas) {
			Filme filme = new Filme(ent);
			lista.inserir(filme);
		}

		// procurando sequencialmente
		inic = lista.now();
		for (String ver : verificacoes) {
			MyIO.println("=> " + ver);
			if (!lista.findSequencial(ver)) {
				MyIO.println("NAO");
			}
			comp += lista.getComparacoes();
		}
		fim = lista.now();
		Ferramentas.gerarLog(inic, fim, comp);
	}

}
